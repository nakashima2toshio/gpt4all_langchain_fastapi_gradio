{"line_plot_code": "import gradio as gr\nfrom vega_datasets import data\n\nstocks = data.stocks()\ngapminder = data.gapminder()\ngapminder = gapminder.loc[\n    gapminder.country.isin([\"Argentina\", \"Australia\", \"Afghanistan\"])\n]\nclimate = data.climate()\nseattle_weather = data.seattle_weather()\n\n# Or generate your own fake data, here's an example for stocks:\n#\n# import pandas as pd\n# import random\n#\n# stocks = pd.DataFrame(\n#     {\n#         \"symbol\": [\n#             random.choice(\n#                 [\n#                     \"MSFT\",\n#                     \"AAPL\",\n#                     \"AMZN\",\n#                     \"IBM\",\n#                     \"GOOG\",\n#                 ]\n#             )\n#             for _ in range(120)\n#         ],\n#         \"date\": [\n#             pd.Timestamp(year=2000 + i, month=j, day=1)\n#             for i in range(10)\n#             for j in range(1, 13)\n#         ],\n#         \"price\": [random.randint(10, 200) for _ in range(120)],\n#     }\n# )\n\n\ndef line_plot_fn(dataset):\n    if dataset == \"stocks\":\n        return gr.LinePlot(\n            stocks,\n            x=\"date\",\n            y=\"price\",\n            color=\"symbol\",\n            color_legend_position=\"bottom\",\n            title=\"Stock Prices\",\n            tooltip=[\"date\", \"price\", \"symbol\"],\n            height=300,\n            width=500,\n        )\n    elif dataset == \"climate\":\n        return gr.LinePlot(\n            climate,\n            x=\"DATE\",\n            y=\"HLY-TEMP-NORMAL\",\n            y_lim=[250, 500],\n            title=\"Climate\",\n            tooltip=[\"DATE\", \"HLY-TEMP-NORMAL\"],\n            height=300,\n            width=500,\n        )\n    elif dataset == \"seattle_weather\":\n        return gr.LinePlot(\n            seattle_weather,\n            x=\"date\",\n            y=\"temp_min\",\n            tooltip=[\"weather\", \"date\"],\n            overlay_point=True,\n            title=\"Seattle Weather\",\n            height=300,\n            width=500,\n        )\n    elif dataset == \"gapminder\":\n        return gr.LinePlot(\n            gapminder,\n            x=\"year\",\n            y=\"life_expect\",\n            color=\"country\",\n            title=\"Life expectancy for countries\",\n            stroke_dash=\"cluster\",\n            x_lim=[1950, 2010],\n            tooltip=[\"country\", \"life_expect\"],\n            stroke_dash_legend_title=\"Country Cluster\",\n            height=300,\n            width=500,\n        )\n\n\nwith gr.Blocks() as line_plot:\n    with gr.Row():\n        with gr.Column():\n            dataset = gr.Dropdown(\n                choices=[\"stocks\", \"climate\", \"seattle_weather\", \"gapminder\"],\n                value=\"stocks\",\n            )\n        with gr.Column():\n            plot = gr.LinePlot()\n    dataset.change(line_plot_fn, inputs=dataset, outputs=plot)\n    line_plot.load(fn=line_plot_fn, inputs=dataset, outputs=plot)\n\n\nif __name__ == \"__main__\":\n    line_plot.launch()\n", "live_dashboard_code": "import math\n\nimport pandas as pd\n\nimport gradio as gr\nimport datetime\nimport numpy as np\n\n\ndef get_time():\n    return datetime.datetime.now()\n\n\nplot_end = 2 * math.pi\n\n\ndef get_plot(period=1):\n    global plot_end\n    x = np.arange(plot_end - 2 * math.pi, plot_end, 0.02)\n    y = np.sin(2 * math.pi * period * x)\n    update = gr.LinePlot(\n        value=pd.DataFrame({\"x\": x, \"y\": y}),\n        x=\"x\",\n        y=\"y\",\n        title=\"Plot (updates every second)\",\n        width=600,\n        height=350,\n    )\n    plot_end += 2 * math.pi\n    if plot_end > 1000:\n        plot_end = 2 * math.pi\n    return update\n\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            c_time2 = gr.Textbox(label=\"Current Time refreshed every second\")\n            gr.Textbox(\n                \"Change the value of the slider to automatically update the plot\",\n                label=\"\",\n            )\n            period = gr.Slider(\n                label=\"Period of plot\", value=1, minimum=0, maximum=10, step=1\n            )\n            plot = gr.LinePlot(show_label=False)\n        with gr.Column():\n            name = gr.Textbox(label=\"Enter your name\")\n            greeting = gr.Textbox(label=\"Greeting\")\n            button = gr.Button(value=\"Greet\")\n            button.click(lambda s: f\"Hello {s}\", name, greeting)\n\n    demo.load(lambda: datetime.datetime.now(), None, c_time2, every=1)\n    dep = demo.load(get_plot, None, plot, every=1)\n    period.change(get_plot, period, plot, every=1, cancels=[dep])\n\nif __name__ == \"__main__\":\n    demo.queue().launch()\n"}