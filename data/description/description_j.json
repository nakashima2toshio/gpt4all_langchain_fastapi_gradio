{"Interface": "Description\n Interface is Gradio's main high-level class, and allows you to create a web-based GUI / demo around a machine learning model (or any Python function) in a few lines of code. You must specify three parameters: (1) the function to create a GUI for (2) the desired input components and (3) the desired output components. Additional parameters can be used to control the appearance and behavior of the demo.", "ChatInterfaceNEW": "Description\n ChatInterface is Gradio's high-level abstraction for creating chatbot UIs, and allows you to create a web-based demo around a chatbot model in a few lines of code. Only one parameter is required: fn, which takes a function that governs the response of the chatbot based on the user input and chat history. Additional parameters can be used to control the appearance and behavior of the demo.", "TabbedInterface": "Description\n A TabbedInterface is created by providing a list of Interfaces or Blocks, each of which gets rendered in a separate tab. Only the components from the Interface/Blocks will be rendered in the tab. Certain high-level attributes of the Blocks (e.g. custom css, js, and head attributes) will not be loaded.", "Blocks": "Description\n Blocks is Gradio's low-level API that allows you to create more custom web applications and demos than Interfaces (yet still entirely in Python).   Compared to the Interface class, Blocks offers more flexibility and control over: (1) the layout of components (2) the events that trigger the execution of functions (3) data flows (e.g. inputs can trigger outputs, which can trigger the next level of outputs). Blocks also offers ways to group together related demos such as with tabs.   The basic usage of Blocks is as follows: create a Blocks object, then use it as a context (with the \"with\" statement), and then define layouts, components, or events within the Blocks context. Finally, call the launch() method to launch the demo.", "Row": "Description\n Row is a layout element within Blocks that renders all children horizontally.", "Column": "Description\n Column is a layout element within Blocks that renders all children vertically. The widths of columns can be set through the scale and min_width parameters. If a certain scale results in a column narrower than min_width, the min_width parameter will win.", "Tab": "Description\n Tab (or its alias TabItem) is a layout element. Components defined within the Tab will be visible when this tab is selected tab.", "Group": "Description\n Group is a layout element within Blocks which groups together children so that they do not have any padding or margin between them.", "Accordion": "Description\n Accordion is a layout element which can be toggled to show/hide the contained content.", "AnnotatedImage": "Description\n Creates a component to displays a base image and colored annotations on top of that image. Annotations can take the from of rectangles (e.g. object detection) or masks (e.g. image segmentation). As this component does not accept user input, it is rarely used as an input component.", "Audio": "Description\n Creates an audio component that can be used to upload/record audio (as an input) or display audio (as an output).", "BarPlot": "Description\n Creates a bar plot component to display data from a pandas DataFrame (as output). As this component does not accept user input, it is rarely used as an input component.", "Button": "Description\n Creates a button that can be assigned arbitrary .click() events. The value (label) of the button can be used as an input to the function (rarely used) or set via the output of a function.", "Chatbot": "Description\n Creates a chatbot that displays user-submitted messages and responses. Supports a subset of Markdown including bold, italics, code, tables. Also supports audio/video/image files, which are displayed in the Chatbot, and other kinds of files which are displayed as links. This component is usually used as an output component.", "Checkbox": "Description\n Creates a checkbox that can be set to True or False. Can be used as an input to pass a boolean value to a function or as an output to display a boolean value.", "CheckboxGroup": "Description\n Creates a set of checkboxes. Can be used as an input to pass a set of values to a function or as an output to display values, a subset of which are selected.", "ClearButton": "Description\n Button that clears the value of a component or a list of components when clicked. It is instantiated with the list of components to clear.", "Code": "Description\n Creates a code editor for viewing code (as an ouptut component), or for entering and editing code (as an input component).", "ColorPicker": "Description\n Creates a color picker for user to select a color as string input. Can be used as an input to pass a color value to a function or as an output to display a color value.", "Dataframe": "Description\n This component displays a table of value spreadsheet-like component. Can be used to display data as an output component, or as an input to collect data from the user.", "Dataset": "Description\n Creates a gallery or table to display data samples. This component is designed for internal use to display examples.", "Dropdown": "Description\n Creates a dropdown of choices from which a single entry or multiple entries can be selected (as an input component) or displayed (as an output component).", "DuplicateButton": "Description\n Button that triggers a Spaces Duplication, when the demo is on Hugging Face Spaces. Does nothing locally.", "File": "Description\n Creates a file component that allows uploading one or more generic files (when used as an input) or displaying generic files (as output).", "FileExplorer": "Description\n Creates a file explorer component that allows users to browse files on the machine hosting the Gradio app. As an input component, it also allows users to select files to be used as input to a function, while as an output component, it displays selected files.", "Gallery": "Description\n Creates a gallery component that allows displaying a grid of images, and optionally captions. If used as an input, the user can upload images to the gallery. If used as an output, the user can click on individual images to view them at a higher resolution.", "HTML": "Description\n Creates a component to display arbitrary HTML output. As this component does not accept user input, it is rarely used as an input component.", "HighlightedText": "Description\n Displays text that contains spans that are highlighted by category or numerical value.", "Image": "Description\n Creates an image component that can be used to upload images (as an input) or display images (as an output).", "ImageEditor": "Description\n Creates an image component that, as an input, can be used to upload and edit images using simple editing tools such as brushes, strokes, cropping, and layers. Or, as an output, this component can be used to display images.", "JSON": "Description\n Used to display arbitrary JSON output prettily. As this component does not accept user input, it is rarely used as an input component.", "Label": "Description\n Displays a classification label, along with confidence scores of top categories, if provided. As this component does not accept user input, it is rarely used as an input component.", "LinePlot": "Description\n Creates a line plot component to display data from a pandas DataFrame (as output). As this component does not accept user input, it is rarely used as an input component.", "LoginButton": "Description\n Creates a button that redirects the user to Sign with Hugging Face using OAuth.", "LogoutButton": "Description\n Creates a Button to log out a user from a Space using OAuth.        which handles both the login and logout processes.", "Markdown": "Description\n Used to render arbitrary Markdown output. Can also render latex enclosed by dollar signs. As this component does not accept user input, it is rarely used as an input component.", "Model3D": "Description\n Creates a component allows users to upload or view 3D Model files (.obj, .glb, .stl, .gltf, .splat, or .ply).", "Number": "Description\n Creates a numeric field for user to enter numbers as input or display numeric output.", "ParamViewer": "Description\n Displays an interactive table of parameters and their descriptions and default values with syntax highlighting. For each parameter, the user should provide a type (e.g. a str), a human-readable description, and a default value. As this component does not accept user input, it is rarely used as an input component.Internally, this component is used to display the parameters of components in the Custom Component Gallery (https://www.gradio.app/custom-components/gallery).", "Plot": "Description\n Creates a plot component to display various kinds of plots (matplotlib, plotly, altair, or bokeh plots are supported). As this component does not accept user input, it is rarely used as an input component.", "Radio": "Description\n Creates a set of (string or numeric type) radio buttons of which only one can be selected.", "ScatterPlot": "Description\n Creates a scatter plot component to display data from a pandas DataFrame (as output). As this component does not accept user input, it is rarely used as an input component.", "SimpleImage": "Description\n Creates an image component that can be used to upload images (as an input) or display images (as an output).", "Slider": "Description\n Creates a slider that ranges from minimum to maximum with a step size of step.", "State": "Description\n A base class for defining methods that all input/output components should have.", "Textbox": "Description\n Creates a textarea for user to enter string input or display string output.", "UploadButton": "Description\n Used to create an upload button, when clicked allows a user to upload files that satisfy the specified file type or generic files (if file_type not set).", "Video": "Description\n Creates a video component that can be used to upload/record videos (as an input) or display videos (as an output). For the video to be playable in the browser it must have a compatible container and codec combination. Allowed combinations are .mp4 with h264 codec, .ogg with theora codec, and .webm with vp9 codec. If the component detects that the output video would not be playable in the browser it will attempt to convert it to a playable mp4 video. If the conversion fails, the original video is returned.", "EventData": "Description\n When a subclass of EventData is added as a type hint to an argument of an event listener method, this object will be passed as that argument. It contains information about the event that triggered the listener, such the target object, and other data related to the specific event that are attributes of the subclass.", "Examples": "Description\n This class is a wrapper over the Dataset component and can be used to create Examples for Blocks / Interfaces. Populates the Dataset component with examples and assigns event listener so that clicking on an example populates the input/output components. Optionally handles example caching for fast inference.", "Progress": "Description\n The Progress class provides a custom progress tracker that is used in a function signature. To attach a Progress tracker to a function, simply add a parameter right after the input parameters that has a default value set to a gradio.Progress() instance. The Progress tracker can then be updated in the function by calling the Progress object or using the tqdm method on an Iterable. The Progress tracker is currently only available with queue().", "make_waveform": "Description\n Generates a waveform video from an audio file. Useful for creating an easy to share audio visualization. The output should be passed into a gr.Video component.", "load": "Description\n Constructs a demo from a Hugging Face repo. Can accept model repos (if src is \"models\") or Space repos (if src is \"spaces\"). The input and output components are automatically loaded from the repo. Note that if a Space is loaded, certain high-level attributes of the Blocks (e.g. custom css, js, and head attributes) will not be loaded.", "Error": "Description\n This class allows you to pass custom error messages to the user. You can do so by raising a gr.Error(\"custom message\") anywhere in the code, and when that line is executed the custom message will appear in a modal on the demo.", "Warning": "Description\n This function allows you to pass custom warning messages to the user. You can do so simply by writing gr.Warning('message here') in your function, and when that line is executed the custom message will appear in a modal on the demo. The modal is yellow by default and has the heading: \"Warning.\" Queue must be enabled for this behavior; otherwise, the warning will be printed to the console using the warnings library.", "Info": "Description\n This function allows you to pass custom info messages to the user. You can do so simply by writing gr.Info('message here') in your function, and when that line is executed the custom message will appear in a modal on the demo. The modal is gray by default and has the heading: \"Info.\" Queue must be enabled for this behavior; otherwise, the message will be printed to the console.", "Request": "Description\n A Gradio request object that can be used to access the request headers, cookies, query parameters and other information about the request from within the prediction function. The class is a thin wrapper around the fastapi.Request class. Attributes of this class include: headers, client, query_params, and path_params. If auth is enabled, the username attribute can be used to get the logged in user.", "mount_gradio_app": "Description\n Mount a gradio.Blocks to an existing FastAPI application.", "Flagging": "No description found.", "Themes": "No description found.", "Client": "Description\n The main Client class for the Python client. This class is used to connect to a remote Gradio app and call its API endpoints.", "Job": "Description\n A Job is a wrapper over the Future class that represents a prediction call that has been submitted by the Gradio client. This class is not meant to be instantiated directly, but rather is created by the Client.submit() method.  A Job object includes methods to get the status of the prediction call, as well to get the outputs of the prediction call. Job objects are also iterable, and can be used in a loop to get the outputs of prediction calls as they become available for generator endpoints."}